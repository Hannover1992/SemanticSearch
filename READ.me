# Semantic Search Engine for Academic Papers

This project provides a semantic search engine tailored for academic papers. It extracts text and metadata from PDFs, creates embeddings, and stores them in a local database for efficient semantic search.

## Quick Start

1. **Install:** `pip install -r requirements.txt`
2. **Prepare:** Place PDFs in `./papers` and BibTeX citations (if available) in the same directory.
3. **Create Database:** `python create_db.py`
4. **Run App:** `streamlit run app.py`
5. **Search:** Enter text in the app, click 'Generate', and use 'Open' to view results.

## Features

- **PDF Processing:** Extracts text and metadata from PDFs.
- **Database Integration:** Stores embeddings in a local database for fast retrieval.
- **Semantic Search:** Employs advanced algorithms to understand search queries and find relevant papers.
- **User-friendly Interface:** Streamlit-based app for easy interaction.

## Code Structure

- `db/`: Database storage
- `papers/`: PDF storage
- `txt/`: Temporary text storage
- `app.log`: Error and operation logs

- `append_db.py`: Add data to the database.
- `convert_txt_to_pdf.sh`: Convert text back to PDF (Bash script).
- `create_db.py`: Initialize the database.
- `embedding.py`: Create embeddings.
- `global_var.py`: Configuration settings.
- `load_db.py`: Load data from the database.
- `test.py`: Testing module.

## Additional Notes

- Multiprocessing for efficient PDF processing.
- Logging for error tracking.
- Configurable chunk size and overlap in `global_var.py`.

For detailed information, refer to the comments within the code.
